This extension is an almost complete, ActiveRecord like support for MongoDB in Yii
It originally started as a fork of [MongoRecord](www.yiiframework.com/extension/mongorecord "MongoRecord")
extension written by [tyohan](http://www.yiiframework.com/user/31/ "tyohan"),
to fix some major bugs, and add full featured suite for [MongoDB](http://www.mongodb.org "MongoDB") developers.

**IMPORTANT!: Versions below 1.1 are deprecated, they have some major bugs**

**IMPORTANT!: This version of Documentation in no longer a full documentation of suite!
Advanced topics has moved to the new place, see below.**

**PLEASE refer to the new FULL-Documentation [page](http://canni.github.com/YiiMongoDbSuite)**
 
##Changelog

This is the 1.3.3 release

New features in 1.3.3

- Ability to set FSync and Safe flag on different scopes, see the "Write queries flags" documentation part
- **Ability to use efficent Cursors instead of raw array, returned by the findAll* methods** see "Use Cursor Flag" documentation part

New features in 1.3.2

- Fixed bug that find* methods don't accept criteria in array format
- Lazy loading/creating of embedded documents
- Little performance boost, save embedded documents configs in static array

New features in 1.3.1

- Fixed few major bugs in EMongoCriteria class
- *Bugfixes to criteria object had forced to change the criteria object creation from array, please see the updated doc for it*
- Fixed bug that in massive assign way, embeded documnets always used only safe attributes
- Setup of PHPUnit testing framework
- Written test cases for EMongoDB class and EMongoCriteria class 

New features in 1.3

- MongoDB GridFS feature support, thanks to work of: Jose Martinez and Philippe Gaultier

New features in 1.2.3

- Gii CRUD generator, now generates advanced search form in admin (like in regular Yii CRUD generator)
- Search form now supports comparsion operators ( > | < | >= | <= | <> | != | == | = )
- In v1.2.2 all search attributes where treated as a string regex, now you can test numbers to, just juse comparsion operators, example:
    - search for '1234' will try to find a string matching regexp /1234/i (this will not work if field is numeric)
    - search for '= 1234' will try to find numberic value 1234
    - search for '>= 1234' will try to find any record with field greater or equals numeric value 1234 

New features in 1.2.2

- Magic method search() delivered with every EMongoDocument object
- Gii CRUD generator now uses search method, to provide text search in admin view (by default using case-insensitive regexp)
- EMongoDocument search() method has one parameter:
    - $caseSensitive true|false, default to false, whathever to use case-sensitive string comparsion 

New features in 1.2.1

- **Support for generating CRUD for EMongoDocument models!**
- Few minor bug fixes

New features in 1.2

- Support for using any other than _id field as a PK
- Better names scopes handling, support for default scope
- *Support to have different models in single collection! see Multimodel collection topic*
- Better memory management, now there is only one collection object instance, per model

New features in 1.1

- automated efficent index definition for collections, per model

New features in 1.0:

- Named scopes just like in AR
- Very easy to use criteria object, you don't have to create complex MongoDB query arrays!
- Better exeption handling
- A lot more PHPDocs in code 

Features:

- Support of using Class::model()->find / findAll / count / countByAttributes and other Yii ActiveRecord syntax
- Support of schema-less documents with Yii standard rules and validation features
- Endless Embedded/Nested document support (Embedded documents are their own Model class with their own rules and other methods.
- (almost, limited only by MongoDB 4MB limit of single document) endless document embedding/nesting
- Ready to go out-of-box *EFFICIENT* DataProvider, witch use native php db driver sort, limit and offset features for returning results!
- Records and embedded documents inherit from CModel, so you can use every class witch can handle of CModel (ie: Gii form generator)
- relation support *idea/concept/example*

Limitations:
- The main limitations are only those present in MongoDB itself, like the 4mb data transfer limit. But That's not a big deal either.
- In it's current incarnation, This extension does NOT work with the OR operator. When we get it working we will remove this line and add an example.

*IMPORTANT: The version on GitHub is more up to date as fixes are pushed to the project. This may or may not get updated on a regular basis*

##Requirements

- Yii 1.1.5 is required, yii 1.1.4 do not have onAfterConstruct event whitch is used here
- MongoDB latest stable is recommended. Untested with older versions.

##Basic usage

Just create a model class as You would with normal ActiveRecord.
Example model simple as standard ActiveRecord:

##Setup

In your protected/config/main.php config file. Comment out (or delete) the current 'db' array for your database in the components section, and add the following to the file:


~~~
[php]


    'import' => array(
      ...
      'ext.YiiMongoDbSuite.*',
    ),

    'components' => array(
      ...
      'mongodb' => array(
        'connectionString' => 'mongodb://localhost',
        'dbName' => 'myDatabaseName',
        'class'     => 'EMongoDB',
        'fsyncFlag' => true,
        'safe' => true, //new flag used only for update function on MongoGridFS system
      ),
    ),


~~~


- ConnectionString: 'localhost' should be changed to the ip or hostname of your host being connected to. For example if connecting to a server it might be `'connectionString' => 'mongodb://username@xxx.xx.xx.xx'` where xx.xx.xx.xx is the ip (or hostname) of your webserver or host.
- dbName: is the name you want the collections to be stored in. The database name.
- fsyncFlag is set to true, this makes mongodb make sure all writes to the database are safely stored to disk. Setting this to false will improve speed but writes ar enot confirmed. So unless you are doing massive or large imports or save() then it is better to be set to true. See the performance section below.
- For more info see the [MongoDB connection page on php.net](http://us3.php.net/manual/en/mongo.connecting.php).

To get started, you can look in the files of the project and there are two example files. a User model for the User document as well as a UserAddress model to represent an embedded document.
- examples/User.php
- examples/UserAddress.php

That's all you have to do for setup. You can use it very much like the active record.
Example:


~~~
[php]


    $client = new Client;
    $client->first_name='something';
    $client->save();
    $clients = Client::model->findAll();


~~~


##Embedded documents

*IMPORTANT: Embedded documents must extend from EMongoEmbeddedDocument instead of EMongoDocument, otherwise whole thing will fail, to work*
*Note: some people reported that embedding regular EMongoDocument works as expected, but i have not tested this, more test/reports needed*

Embedded documents are almost identical as EMongoDocument you only can't save them to DB they're saved by the EMongoDocument model witch has them as an embedded (with one exception, you can save them if you will do it explicitly)
Notice: Embedded documents don't have a static model() method!

So if you have a User.php model, and an UserAddress.php model which is the embedded document.
Lest assume we have following embedded document (a full example is in the examples directory):


~~~
[php]


    class UserAddress extends EMongoEmbeddedDocument
    {
      public $city;
      public $street;
      public $house;
      public $apartment;
      public $zip;

      public function rules()
      {
        return array(
          array('city, street, house', 'length', 'max'=>255),
          array('house, apartment, zip', 'length', 'max'=>10),
        );
      }

      public function attributeLabels()
      {
        return array(
          'zip'=>'Postal Code',
        );
      }
    }


~~~


Now we can add this method to our User model from previous section:


~~~
[php]


    class User extends EMongoDocument {
      ...

      public function embeddedDocuments()
      {
        return array(
          // property name => embedded document class name
          'address'=>'UserAddress'
        );
      }

      ...
    }


~~~


And using it is as easy as Pie!


~~~
[php]


    $client = new Client;
    $client->address->city='New York';
    $client->save();


~~~


it will automatically call validation for model and all embedded documents!
You even can nest embedded documents in embedded documents, just define embeddedDocuments() method with array of another embedded documents
*IMPORTANT*: This mechanism uses recurrency, and will not handle with circular nesting, you have to use this feature with care :P

##Arrays

You easily can store arrays in DB!

**Simple arrays**

- just define a property for an array, and store an array in it.

**Arrays of embedded documents**

- there is no way (that i know) where i can easily provide mechanism for this, you have to write Your own
- This is how I accomplish it for now:


~~~
[php]


    // add a property for your array of embedded documents
    public $addresses;

	  // add EmbeddedArraysBehavior
    public function behaviors()
    {
      return array(
        array(
          'class'=>'ext.YiiMongoDbSuite.extra.EEmbeddedArraysBehavior',
          'arrayPropertyName'=>'addresses', // name of property
          'arrayDocClassName'=>'ClientAddress' // class name of documents in array
        ),
      );
    }


~~~


So for the user, if you want them to be able to save multiple addresses, you can do this:


~~~
[php]


    $c = new Client;
    $c->addresses[0] = new ClientAddress;
    $c->addresses[0]->city='NY';
    $c->save(); // behavior will handle validation of array too


~~~


or


~~~
[php]


    $c = Client::model()->find();
    foreach($c->addresses as $addr)
    {
        echo $addr->city;
    }


~~~


##Querying

This is one of the things that makes this extension great. It's very easy to query for the objects you want.


~~~
[php]


    // simple find first. just like normal AR.
    $object = ModelClass::model->find()


~~~

Now suppose you want to only retrieve users, that have a status of 1 (active). There is an object just for that, making queries easy.


~~~
[php]


    $c = new EMongoCriteria;
    $c->status('==', 1);
    $users = ModelClass::model->findAll($c);


~~~


and now $users will be an array of all users with the status key in their document set to 1. This is a good way to list only active users.
What's that? You only want to show the 10 most recent activated users? Thats easy too.


~~~
[php]


    $c = new EMongoCriteria;
    $c->active('==', 1)->limit(10);

    $users = ModelClass::model->findAll($c);


~~~


It's that easy. In place of the 'equals' key, you can use any of the following operators


~~~


    - 'greater'   | >
    - 'greaterEq' | >=
    - 'less'      | <
    - 'lessEq'    | <=
    - 'notEq'     | !=, <>
    - 'in'        | 
    - 'notIn'     | 
    - 'all'       | 
    - 'size'      | 
    - 'exists'    | 
    - 'type'      | // BSON type see mongodb docs for this
    - 'notExists' | 
    - 'mod'       | %
    - 'equals'    | ==
    - 'where'     | // JavaScript operator


~~~


*NOTICE: the $or operator in newer versions of mongodb does NOT work with this extension yet. We will add it to the list above when it is fixed.Newer versions of mongo db will work, just not the $or operator.
For examples and use for how to use these operators effectively, use the [MongoDB Operators Documentation here](http://www.mongodb.org/display/DOCS/Advanced+Queries).

Here are a few more examples for using criteria:


~~~
[php]


    // first you must create a new criteria object
    $criteria = new EMongoCriteria;

    // find the single user with the personal_number == 12345
    $criteria->personal_number('==', 12345);
    // OR like this:
    $criteria->personal_number = 12345; 

    $user = User::model->find($criteria);

    // find all users in New York. This will search in the embedded document of UserAddress
    $criteria->address->city('==', 'New York');
    // Or
    $criteria->address->city = 'New York';
    $users = User::model()->findAll($criteria);

    // Ok now try this. Only active users, only show at most 10 users, and sort by first name, descending, and offset by 20 (pagination):
    // note the sort syntax. it must have an array value and use the => syntax.
    $criteria->status('==', 1)->limit(10)->sort(array('firstName' => EMongoCriteria::SORT_DESC))->offset(20);
    $users = User::model()->findAll($criteria);

    // A more advanced case. All users with a personal_number evenly divisible by 10, sorted by first name ascending, limit 10 users, offset by 25 users (pagination), and remove any address fields from the returned result.
    $criteria->personal_number('%', array(10, 0)) // modulo => personal_number % 10 == 0
             ->sort(array('firstName' => EMongoCriteria::SORT_ASC))
             ->limit(10)
             ->offset(25);
    $users = User::model()->findAll($criteria);

    // You can even use the where operator with javascript like so:
    $criteria->fieldName('where', ' expression in javascript ie: this.field > this.field2');
    // but remember that this kind of query is a bit slower than normal finds.


~~~

###Regexp / SQL LIKE replacemt

You can use native PHP Mongo driver class MongoRegex, to query:


~~~
[php]


    // Create criteria
    $criteria = new EMongoCriteria;
    // Find all records witch have first name starring on a, b and c, case insensitive search
    $criteria->first_name = new MongoRegex('/[abc].*/i');
    $clients = Client::model()->findAll($criteria);
    // see phpdoc for MongoRegex class for more examples

~~~


for reference on how to use query array see: http://www.php.net/manual/en/mongocollection.find.php

##Creating criteria object from an array:


~~~
[php]


    // Example criteria
    $array = array(
        'conditions'=>array(
        	// field name => operator definition
        	'FieldName1'=>array('greaterEq' => 10), // Or 'FieldName1'=>array('>=', 10)
        	'FieldName2'=>array('in' => array(1, 2, 3)),
        	'FieldName3'=>array('exists'),
        ),
        'limit'=>10,
        'offset'=>25,
        'sort'=>array('fieldName1'=>EMongoCriteria::SORT_ASC, 'fieldName4'=>EMongoCriteria::SORT_DESC),
    );
	$criteria = new EMongoCriteria($array);
	// or
	$clients = ClientModel::model()->findAll($array);

~~~

##GidFS implementation

###GridFS parameters (module)

You can have different models in single collection, example:

###GridFS samples


~~~
[php]

	Yii::import('ext.YiiMongoDbSuite.examples.MongoImage');
    //create a new image
    $image = new MongoImage();
    $image->filename = '/var/www/myImage.JPG';
    $image->metadata = array('value1'=>1, 'value2'=>2);
    $res = $image->save();
    if($res === true)
    {
        echo 'save file ok';
    }
    else
    {
        echo 'error saving file';
    }
    
    //find image
    $image = MongoImage::model()->find();
    if($image instanceof MongoImage)
    {
        echo 'find ok';
    }
    else
    {
        echo 'error finding object';
    }
    
    //findall images
    $images = MongoImage::model()->findAll();
    if(is_array($images))
    {
        echo 'findall ok';
    }
    else
    {
        echo 'error on findall';
    }
    
    var_dump($images);
        
    //delete images
    $image = MongoImage::model()->find();
    if($image instanceof MongoImage)
    {
        $result = $image->delete();
        if($result === true)
        {
            echo 'delete ok';
        }
        else
        {
            echo 'delete notok';
        }
    }
    else
    {
        echo 'no image found to delete';
    }
    
    //deleteAll image
    $result = MongoImage::model()->deleteAll();
    if(is_array($result)===true)
    {
        echo ' isarray';
        if(isset($result['err']) === true )
        {
            echo ' error deleting images:'.$result['err'];
        }
        else
        {
            echo ' elements deleted:'.$result['n'];
        }
    }
    
    //deletebyPk image
    $image = MongoImage::model()->find();
    if($image instanceof MongoImage)
    {
        $result = MongoImage::model()->deleteByPk($image->_id);
        if($result === true)
        {
            echo 'delete by pk ok';
        }
    }
    else
    {
        echo 'no image found to delete by pk';
    }
    
    //insert image and update
    $image = new MongoImage();
    $image->filename = '/var/www/myImage.JPG';
    $image->metadata = array('value1'=>1, 'value2'=>2);
    $res = $image->save();
    $image->filename =  '/var/www/myImageUpdated.JPG';
    $image->metadata = array('value1'=>3, 'value2'=>4);
    $res = $image->save();
    if($res === true)
    {
        echo 'update ok';
    }
    else
    {
        echo 'error updating';
    }
    
    //MongoGridFSFile functions
    $image = MongoImage::model()->find();
    //getBytes function
    $bytes = $image->getBytes();
    //getFilename
    $filename = $image->getFilename();
    //getSize
    $size = $image->getSize();
    //write
	$image->write();

~~~


##Known bugs

- Remember, this is not complete yet. So at this stage, it can have some ;]
- If you find any please let me know
- As said before, it does not work with the OR operators

##Resources

 * [Project page](https://github.com/canni/YiiMongoDbSuite/)
 * [MongoDB documentation](http://www.mongodb.org/display/DOCS/Home)
 * [PHP MongoDB Driver docs](http://www.php.net/manual/en/book.mongo.php)

##Contribution needed!

- I'm not English native speaker, need someone who can correct/rewrite/write my documentation and/or PHPDoc's in code
- Any help would be great :)
- Contact me: darek.krk on a gmail dot com or via PM

##Big thanks goes to:

- tyohan: for first inspirations and idea of extension
- luckysmack: for big help with testing and documentation
- Jose Martinez and Philippe Gaultier, for implementing and sharing GridFS support
